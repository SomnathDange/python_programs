Difference between list and tuple
1) list is mutable , it can't be used as a key in a dictionary
   tuple is immutable , it can be used as a key in the dictionary
2) lists are homogeneous
   tuples are heterogeneous 
Why we need comma at the end of the tuples element:
   Creating a tuple with one element is a bit tricky.
   Having one element within parentheses is not enough. We will need a trailing comma to indicate that it is in fact a tuple
   my_tuple = ("hello",)  
   print(type(my_tuple))
   
Python function arguments:
   Required arguments[  def printme( str): ]
   Keyword arguments [def printme( str ):]
   Default arguments [Should be written at the end of the arguments] [def printinfo( name, age = 35 ):]
   Variable-length arguments [def printinfo( arg1, *vartuple ):]

#Python details

=========================
Lambda Functions:
	anonymous functions, i.e. functions without a name
	The general syntax of a lambda function is quite simple:
lambda argument_list: expression 
The argument list consists of a comma separated list of arguments and the expression is an arithmetic expression 
using these arguments. You can assign the function to a variable to give it a name. 
The following example of a lambda function returns the sum of its two arguments:

>>> f = lambda x, y : x + y
>>> f(1,1)
2

Example2:

>>> f = lambda x, y : (x * y) + (x*y)
>>> f(2,3)
12
>>>

=======================

FILETR:

>>> foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]
>>> 
>>> print filter(lambda x: x % 3 == 0, foo)
[18, 9, 24, 12, 27]
>>> 

filter() calls our lambda function for each element of the list, and returns a new list that 
contains only those elements for which the function returned "True".

=========================

MAP:

map() is used to convert our list. The given function is called for every element in the original list, 
and a new list is created which contains the return values from our lambda function

>>> 
>>> print map(lambda x: x * 2 + 10, foo)
[14, 46, 28, 54, 44, 58, 26, 34, 64]
>>> 

============================

REDUCE:

>>> 
>>> print reduce(lambda x, y: x + y, foo)
139

reduce() is somewhat special. The "worker function" for this one must accept two arguments 
(we've called them x and y here), not just one. The function is called with the first two 
elements from the list, then with the result of that call and the third element, and so on, 
until all of the list elements have been handled. This means that our function is called n-1 
times if the list contains n elements. The return value of the last call is the result of the 
reduce() construct. In the above example, it simply adds the arguments, so we get the sum of all elements
=================================

*Who creates *.pyc file and why?*

A *.pyc file is created for imported modules, and they are placed in the same 
directory containing the .py file. However... no .pyc file is created for the main 
script for your program. In other words... if you call "python myscript.py" on the command line, 
there will be no .pyc file for myscript.py.
=====================================
